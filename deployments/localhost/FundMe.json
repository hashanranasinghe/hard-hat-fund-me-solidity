{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fa997330c7fa0eb7bfad1968793480935dd5d9feeba7965205244752ef814e0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1039296",
    "logsBloom": "0x
    "blockHash": "0xd8073ceb8f986427648515a991d6a947bb27946ce9640fb9e5c6526b441507d9",
    "transactionHash": "0x6fa997330c7fa0eb7bfad1968793480935dd5d9feeba7965205244752ef814e0",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1039296",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "a6edb6a6871fd8dd477d30cf4e31aae5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.18;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\",\"keccak256\":\"0x246e8a0bb3a43608cc0d9cbd964853f7a442ff8a4b4369922e81ea659ca20f03\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.16 <0.9.0;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        //Eth in terms of usd\\r\\n        //3000,00000000\\r\\n        return uint256(price * 1e10); //1**10==10000000000\\r\\n    }\\r\\n\\r\\n    function getVersion(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        getVersion(priceFeed);\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountedInUsd = (ethPrice * ethAmount) / 1e18;\\r\\n        return ethAmountedInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5f2c23b314e7b43fc62e024f87edff1631bd77ffcb77f9bb2b8aca77fdf60772\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012f3380380620012f383398181016040528101906200003791906200011d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161116c62000187600039600081816102cc0152818161045f01528181610505015281816106900152610886015261116c6000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c146101ac57610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610bbd565b6101e9565b6040516100bf9190610c03565b60405180910390f35b3480156100d457600080fd5b506100dd610232565b6040516100ea9190610c03565b60405180910390f35b3480156100ff57600080fd5b506101086102ca565b005b34801561011657600080fd5b5061011f6104f4565b60405161012c9190610c03565b60405180910390f35b34801561014157600080fd5b5061014a610501565b6040516101579190610c2d565b60405180910390f35b34801561016c57600080fd5b50610175610529565b6040516101829190610ca7565b60405180910390f35b610193610553565b005b3480156101a157600080fd5b506101aa61068e565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610cee565b61091c565b6040516101e09190610c2d565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c59190610d30565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103fa57600080828154811061037457610373610d5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f290610dbb565b915050610352565b50600067ffffffffffffffff81111561041657610415610e03565b5b6040519080825280602002602001820160405280156104445781602001602082028036833780820191505090505b506000908051906020019061045a929190610ab3565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104a190610e63565b60006040518083038185875af1925050503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50509050806104f157600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610592600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461096390919063ffffffff16565b10156105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90610ed5565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106229190610ef5565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610713576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561079657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161074c575b5050505050905060005b81518110156108215760008282815181106107be576107bd610d5d565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061081990610dbb565b9150506107a0565b50600067ffffffffffffffff81111561083d5761083c610e03565b5b60405190808252806020026020018201604052801561086b5781602001602082028036833780820191505090505b5060009080519060200190610881929190610ab3565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108c890610e63565b60006040518083038185875af1925050503d8060008114610905576040519150601f19603f3d011682016040523d82523d6000602084013e61090a565b606091505b505090508061091857600080fd5b5050565b600080828154811061093157610930610d5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061096e826109aa565b50600061097a83610a22565b90506000670de0b6b3a764000085836109939190610f29565b61099d9190610f9a565b9050809250505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190610d30565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190611043565b5050509150506402540be40081610aab91906110be565b915050919050565b828054828255906000526020600020908101928215610b2c579160200282015b82811115610b2b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ad3565b5b509050610b399190610b3d565b5090565b5b80821115610b56576000816000905550600101610b3e565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8a82610b5f565b9050919050565b610b9a81610b7f565b8114610ba557600080fd5b50565b600081359050610bb781610b91565b92915050565b600060208284031215610bd357610bd2610b5a565b5b6000610be184828501610ba8565b91505092915050565b6000819050919050565b610bfd81610bea565b82525050565b6000602082019050610c186000830184610bf4565b92915050565b610c2781610b7f565b82525050565b6000602082019050610c426000830184610c1e565b92915050565b6000819050919050565b6000610c6d610c68610c6384610b5f565b610c48565b610b5f565b9050919050565b6000610c7f82610c52565b9050919050565b6000610c9182610c74565b9050919050565b610ca181610c86565b82525050565b6000602082019050610cbc6000830184610c98565b92915050565b610ccb81610bea565b8114610cd657600080fd5b50565b600081359050610ce881610cc2565b92915050565b600060208284031215610d0457610d03610b5a565b5b6000610d1284828501610cd9565b91505092915050565b600081519050610d2a81610cc2565b92915050565b600060208284031215610d4657610d45610b5a565b5b6000610d5484828501610d1b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dc682610bea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610df857610df7610d8c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e4d600083610e32565b9150610e5882610e3d565b600082019050919050565b6000610e6e82610e40565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ebf601b83610e78565b9150610eca82610e89565b602082019050919050565b60006020820190508181036000830152610eee81610eb2565b9050919050565b6000610f0082610bea565b9150610f0b83610bea565b9250828201905080821115610f2357610f22610d8c565b5b92915050565b6000610f3482610bea565b9150610f3f83610bea565b9250828202610f4d81610bea565b91508282048414831517610f6457610f63610d8c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fa582610bea565b9150610fb083610bea565b925082610fc057610fbf610f6b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fea81610fcb565b8114610ff557600080fd5b50565b60008151905061100781610fe1565b92915050565b6000819050919050565b6110208161100d565b811461102b57600080fd5b50565b60008151905061103d81611017565b92915050565b600080600080600060a0868803121561105f5761105e610b5a565b5b600061106d88828901610ff8565b955050602061107e8882890161102e565b945050604061108f88828901610d1b565b93505060606110a088828901610d1b565b92505060806110b188828901610ff8565b9150509295509295909350565b60006110c98261100d565b91506110d48361100d565b92508282026110e28161100d565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561111a57611119610d8c565b5b828205841483151761112f5761112e610d8c565b5b509291505056fea264697066735822122023d588492e04521f3c85bb4846670f995ab3e0546ac0b1cd032809e4b31c0b7464736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c146101ac57610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610bbd565b6101e9565b6040516100bf9190610c03565b60405180910390f35b3480156100d457600080fd5b506100dd610232565b6040516100ea9190610c03565b60405180910390f35b3480156100ff57600080fd5b506101086102ca565b005b34801561011657600080fd5b5061011f6104f4565b60405161012c9190610c03565b60405180910390f35b34801561014157600080fd5b5061014a610501565b6040516101579190610c2d565b60405180910390f35b34801561016c57600080fd5b50610175610529565b6040516101829190610ca7565b60405180910390f35b610193610553565b005b3480156101a157600080fd5b506101aa61068e565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610cee565b61091c565b6040516101e09190610c2d565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c59190610d30565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103fa57600080828154811061037457610373610d5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f290610dbb565b915050610352565b50600067ffffffffffffffff81111561041657610415610e03565b5b6040519080825280602002602001820160405280156104445781602001602082028036833780820191505090505b506000908051906020019061045a929190610ab3565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104a190610e63565b60006040518083038185875af1925050503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50509050806104f157600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610592600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461096390919063ffffffff16565b10156105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90610ed5565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106229190610ef5565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610713576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561079657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161074c575b5050505050905060005b81518110156108215760008282815181106107be576107bd610d5d565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061081990610dbb565b9150506107a0565b50600067ffffffffffffffff81111561083d5761083c610e03565b5b60405190808252806020026020018201604052801561086b5781602001602082028036833780820191505090505b5060009080519060200190610881929190610ab3565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108c890610e63565b60006040518083038185875af1925050503d8060008114610905576040519150601f19603f3d011682016040523d82523d6000602084013e61090a565b606091505b505090508061091857600080fd5b5050565b600080828154811061093157610930610d5d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061096e826109aa565b50600061097a83610a22565b90506000670de0b6b3a764000085836109939190610f29565b61099d9190610f9a565b9050809250505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190610d30565b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190611043565b5050509150506402540be40081610aab91906110be565b915050919050565b828054828255906000526020600020908101928215610b2c579160200282015b82811115610b2b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ad3565b5b509050610b399190610b3d565b5090565b5b80821115610b56576000816000905550600101610b3e565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8a82610b5f565b9050919050565b610b9a81610b7f565b8114610ba557600080fd5b50565b600081359050610bb781610b91565b92915050565b600060208284031215610bd357610bd2610b5a565b5b6000610be184828501610ba8565b91505092915050565b6000819050919050565b610bfd81610bea565b82525050565b6000602082019050610c186000830184610bf4565b92915050565b610c2781610b7f565b82525050565b6000602082019050610c426000830184610c1e565b92915050565b6000819050919050565b6000610c6d610c68610c6384610b5f565b610c48565b610b5f565b9050919050565b6000610c7f82610c52565b9050919050565b6000610c9182610c74565b9050919050565b610ca181610c86565b82525050565b6000602082019050610cbc6000830184610c98565b92915050565b610ccb81610bea565b8114610cd657600080fd5b50565b600081359050610ce881610cc2565b92915050565b600060208284031215610d0457610d03610b5a565b5b6000610d1284828501610cd9565b91505092915050565b600081519050610d2a81610cc2565b92915050565b600060208284031215610d4657610d45610b5a565b5b6000610d5484828501610d1b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dc682610bea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610df857610df7610d8c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e4d600083610e32565b9150610e5882610e3d565b600082019050919050565b6000610e6e82610e40565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ebf601b83610e78565b9150610eca82610e89565b602082019050919050565b60006020820190508181036000830152610eee81610eb2565b9050919050565b6000610f0082610bea565b9150610f0b83610bea565b9250828201905080821115610f2357610f22610d8c565b5b92915050565b6000610f3482610bea565b9150610f3f83610bea565b9250828202610f4d81610bea565b91508282048414831517610f6457610f63610d8c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fa582610bea565b9150610fb083610bea565b925082610fc057610fbf610f6b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fea81610fcb565b8114610ff557600080fd5b50565b60008151905061100781610fe1565b92915050565b6000819050919050565b6110208161100d565b811461102b57600080fd5b50565b60008151905061103d81611017565b92915050565b600080600080600060a0868803121561105f5761105e610b5a565b5b600061106d88828901610ff8565b955050602061107e8882890161102e565b945050604061108f88828901610d1b565b93505060606110a088828901610d1b565b92505060806110b188828901610ff8565b9150509295509295909350565b60006110c98261100d565b91506110d48361100d565b92508282026110e28161100d565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561111a57611119610d8c565b5b828205841483151761112f5761112e610d8c565b5b509291505056fea264697066735822122023d588492e04521f3c85bb4846670f995ab3e0546ac0b1cd032809e4b31c0b7464736f6c63430008120033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}