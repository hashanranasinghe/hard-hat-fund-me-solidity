{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport \"./PriceConverter.sol\";\n\n//get funds from users\n//withdraw funds\n//set a minimum funding value in usd\n\n//to reduce gas fee -constant\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    //796983 - non const\n    //777,453 - const\n    //753,874 - immutable\n    //733,917- revert\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18; ///1*10**18\n    address[] public funders;\n    mapping(address => uint256) public addressAmountFunded;\n\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        //want to be able to set a minimum fund amount in usd\n        //1.how do we send Eth to this contract??????????\n\n        msg.value.getConversionRate(priceFeed);\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"not enough\"\n        ); //1e18 = 1eth\n        //18 decimal\n        funders.push(msg.sender);\n        addressAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n        //actually withdraw the funds\n\n        //transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        //send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess,\"Send failed\");\n        //call\n        //(bool callSuccess,bytes memory dataReturned) =  payable(msg.sender).call{value:address(this).balance}(\"\");\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    modifier onlyOwner() {\n        //require(msg.sender == i_owner, \"sender is not owner\");\n        if (msg.sender == i_owner) {\n            revert NotOwner();\n        }\n        _; //do the all rest of code\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.16 <0.9.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        //Eth in terms of usd\r\n        //3000,00000000\r\n        return uint256(price * 1e10); //1**10==10000000000\r\n    }\r\n\r\n    function getVersion(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        getVersion(priceFeed);\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountedInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountedInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}